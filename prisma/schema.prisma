// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User

// Auth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Auth.js
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Auth.js
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  postsMetadata PostMetadata[]
}

// Auth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Data

model Post {
  id String @default(cuid()) @id

  postHistory  PostHistory[]
  inRelations  PostRelation[] @relation("toPost") /// Used for relations to (Manual - By script).
  outRelations PostRelation[] @relation("fromPost") /// Used for relations from (Has been applied to).
}

model PostRelation {
  isSystem Boolean

  fromPost   Post   @relation("fromPost", fields: [fromPostId], references: [id])
  fromPostId String
  toPost     Post   @relation("toPost", fields: [toPostId], references: [id])
  toPostId   String

  @@id([fromPostId, toPostId])
}

model PostHistory {
  id String @unique @default(cuid())

  title String
  language String @default("en")
  content String @db.Text

  endTimestamp   DateTime?
  createdTimestamp DateTime  @default(now())

  metadata       PostMetadata @relation(fields: [postMetadataId], references: [id])
  postMetadataId String       @unique

  post         Post   @relation(fields: [postId], references: [id])
  postId       String

  @@unique([postId, language, endTimestamp])
}

model PostMetadata {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  postHistory PostHistory?
}
