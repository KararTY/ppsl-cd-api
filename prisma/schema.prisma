// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User

// Auth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Auth.js
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Auth.js
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  posts  PostMetadata[]
}

// Auth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Data

model Post {
  id String @default(cuid())

  postId    String
  language  String
  timestamp DateTime @default(now())

  title   String
  content String @db.Text

  metadata PostMetadata?

  @@id([postId, language, timestamp])
}

model PostRelation {
  id String @default(cuid())

  isSystem Boolean

  fromPostId String
  toPostId   String

  @@id([fromPostId, toPostId])
}

model PostMetadata {
  id String @id @default(cuid())

  post          Post     @relation(fields: [postId, postLanguage, postTimestamp], references: [postId, language, timestamp])
  postId        String
  postLanguage  String
  postTimestamp DateTime

  user User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([postId, postLanguage, postTimestamp])
}
